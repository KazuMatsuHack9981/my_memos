#インタープリタ起動
・irb
  exitで終了する
・ruby
  何も変化してないように見えるが、起動している。irbのほうがいい。


#基本
　・サーバーの起動
	rails server
　・プログラムの起動
	ruby プログラム.rb
　・Railsアプリ作成
	rails new アプリ名


#このファイルについて
　・~/document/ruby_on_rails/：ハードリンクファイル実体を参照している。
　・~/desktop/memos/：ここに実体がある。



#オブジェクト指向である
　Javaと一緒でクラス, メソッドがある



#基本構文
　・標準出力
	puts("")



　・型変換
	-文字列へ
		値.to_s
	-整数へ
		値.to_i



　・if文
	if 条件 then
		処理１
	else
		処理２
	end
	※()と：いらないので注意！！！



　・case文
	case 条件
	when 値１
		処理
	end



　・while文
	while 条件
		処理
	end



　・配列
	変数 = Array.new
	変数 = Array.new 数
	変数 = [値１, 値２, ...]



　・for文
	for 変数 in 配列
		処理
	end



　・範囲演算子
	値..値



　・ハッシュ
	変数 = Hash.new
	変数 = {キー１=>値１, キー２=>値２, ...}
	
	-ハッシュのfor文
		for 変数 in ハッシュ
			変数[0]：キー
			変数[1]：値
		end

　	-each文
		ハッシュ変数.each do |key, value|
			処理
		end
		これにより[0]とか[1]とかしなくても一気にキーと値を取り出せる。



　・メソッド
	-引数なし
		def メソッド名
			処理
		end
	
	-引数あり
		宣言　　：　def メソッド名 引数１, 引数２, ...
		呼び出し：　メソッド名　値１, 値２, ...
	
	※()を宣言でも呼び出しでもつけていい。普通にやっていい。




　・コンストラクタ(イニシャライザ)
	-宣言
		def initialize 引数, ...
			初期化処理
		end

	-宣言(初期値代入)
		def initialize 引数=初期値, ...
			@インスタンス変数 = 引数
		end

	-インスタンス化
		変数 = クラス名.new コンストラクタの引数, ...

	-インスタンス変数
		インスタンス変数は、「@変数」のように書き、これはインスタンスが存在してる限りずっとこの値を保持する。
		※インスタンス変数の変更には、アクセサが必要！！！
		※クラスメソッド内では使えない



　・アクセサ
　	インスタンス変数は@で書いただけじゃ読み書きができない。※読みも。
　	クラス宣言の直下にJavaのインスタンス変数の宣言みたく以下を書く。
　	-attr_reader:インスタンス変数   　 ==>   　読みのみを可能にする
　	-attr_writer:インスタンス変数    　==>  　 書きのみを可能にする
　	-attr_accessor:インスタンス変数  　==>　   読み書き両方を可能にする
	
	

　・クラスメソッド
　	-方法１
　		def self.メソッド　引数
　			処理
　		end
　	
　	-方法２
　		def クラス.メソッド　引数
　			処理
　		end
　		
　		
　		
　・クラス変数
　	-宣言
　		@@変数名
　		※読み書き可
　		※クラスメソッドの中で使える
　		
　		
　		
　・継承
　	class クラス名 << 継承するクラス名
　		クラスの内容
　	end
　	※サブクラスでスーパークラスと同じメソッドを宣言したらオーバーライド
　	

